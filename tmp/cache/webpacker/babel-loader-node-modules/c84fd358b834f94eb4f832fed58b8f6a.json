{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport consumer from \"./consumer\";\n$(function () {\n  var _consumer$subscriptio;\n\n  var chatChannel = consumer.subscriptions.create(\"RoomChannel\", (_consumer$subscriptio = {\n    connected: function connected() {// Called when the subscription is ready for use on the server\n    },\n    disconnected: function disconnected() {// Called when the subscription has been terminated by the server\n    },\n    received: function received(data) {// Called when there's incoming data on the websocket for this channel\n    }\n  }, _defineProperty(_consumer$subscriptio, \"received\", function received(data) {\n    return $('#messages').append(data['message']);\n  }), _defineProperty(_consumer$subscriptio, \"speak\", function speak(message) {\n    return this.perform('speak', {\n      message: message\n    });\n  }), _consumer$subscriptio));\n  $(document).on('keypress', '[data-behavior~=room_speaker]', function (event) {\n    if (event.keyCode === 13) {\n      chatChannel.speak(event.target.value);\n      event.target.value = '';\n      return event.preventDefault();\n    }\n  });\n});","map":{"version":3,"sources":["/Users/tsuyoshi/myapp/app/javascript/channels/room_channel.js"],"names":["consumer","$","chatChannel","subscriptions","create","connected","disconnected","received","data","append","message","perform","document","on","event","keyCode","speak","target","value","preventDefault"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,YAArB;AAEAC,CAAC,CAAC,YAAU;AAAA;;AACV,MAAMC,WAAW,GAAGF,QAAQ,CAACG,aAAT,CAAuBC,MAAvB,CAA8B,aAA9B;AAClBC,IAAAA,SADkB,uBACN,CACV;AACD,KAHiB;AAKlBC,IAAAA,YALkB,0BAKH,CACb;AACD,KAPiB;AASlBC,IAAAA,QATkB,oBASTC,IATS,EASH,CACb;AACD;AAXiB,wDAYR,kBAASA,IAAT,EAAe;AACvB,WAAOP,CAAC,CAAC,WAAD,CAAD,CAAeQ,MAAf,CAAsBD,IAAI,CAAC,SAAD,CAA1B,CAAP;AACD,GAdiB,mDAeX,eAASE,OAAT,EAAkB;AACvB,WAAO,KAAKC,OAAL,CAAa,OAAb,EAAqB;AAC1BD,MAAAA,OAAO,EAAEA;AADiB,KAArB,CAAP;AAGD,GAnBiB,0BAApB;AAsBAT,EAAAA,CAAC,CAACW,QAAD,CAAD,CAAYC,EAAZ,CAAe,UAAf,EAA2B,+BAA3B,EAA4D,UAASC,KAAT,EAAgB;AAC1E,QAAIA,KAAK,CAACC,OAAN,KAAkB,EAAtB,EAA0B;AACxBb,MAAAA,WAAW,CAACc,KAAZ,CAAkBF,KAAK,CAACG,MAAN,CAAaC,KAA/B;AACAJ,MAAAA,KAAK,CAACG,MAAN,CAAaC,KAAb,GAAqB,EAArB;AACA,aAAOJ,KAAK,CAACK,cAAN,EAAP;AACD;AACF,GAND;AAOD,CA9BA,CAAD","sourcesContent":["import consumer from \"./consumer\"\n\n$(function(){\n  const chatChannel = consumer.subscriptions.create(\"RoomChannel\", {\n    connected() {\n      // Called when the subscription is ready for use on the server\n    },\n\n    disconnected() {\n      // Called when the subscription has been terminated by the server\n    },\n\n    received(data) {\n      // Called when there's incoming data on the websocket for this channel\n    },\n    received: function(data) {\n      return $('#messages').append(data['message']);\n    },\n    speak: function(message) {\n      return this.perform('speak',{\n        message: message\n      });\n    }\n  });\n\n  $(document).on('keypress', '[data-behavior~=room_speaker]', function(event) {\n    if (event.keyCode === 13) {\n      chatChannel.speak(event.target.value);\n      event.target.value = '';\n      return event.preventDefault();\n    }\n  });\n});\n"]},"metadata":{},"sourceType":"module"}